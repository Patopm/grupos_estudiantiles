# Generated by Django 5.2.6 on 2025-09-21 20:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="MFAEnforcementPolicy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Administrador"),
                            ("president", "Presidente"),
                            ("student", "Estudiante"),
                        ],
                        help_text="Rol de usuario al que aplica la política",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "mfa_required",
                    models.BooleanField(
                        default=False, help_text="Si MFA es requerido para este rol"
                    ),
                ),
                (
                    "grace_period_days",
                    models.IntegerField(
                        default=7,
                        help_text="Días de gracia para configurar MFA después de que se haga requerido",
                    ),
                ),
                (
                    "enforcement_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha desde la cual se aplica la política (null = inmediato)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Política de Aplicación MFA",
                "verbose_name_plural": "Políticas de Aplicación MFA",
                "db_table": "mfa_enforcement_policies",
                "ordering": ["role"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="ID único del usuario",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Administrador"),
                            ("president", "Presidente"),
                            ("student", "Estudiante"),
                        ],
                        default="student",
                        help_text="Rol del usuario en el sistema",
                        max_length=20,
                    ),
                ),
                (
                    "student_id",
                    models.CharField(
                        blank=True,
                        help_text="Matrícula del estudiante (requerida solo para estudiantes y presidentes)",
                        max_length=10,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_student_id",
                                message="La matrícula debe tener el formato AL seguido de 8 dígitos",
                                regex="^AL[0-9]{8}$",
                            )
                        ],
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Correo electrónico del usuario",
                        max_length=254,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_email",
                                message="El correo electrónico debe ser válido y pertenecer a Tecmilenio",
                                regex="^[a-zA-Z0-9.]+@tecmilenio.mx$",
                            )
                        ],
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Número de teléfono del usuario",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "is_active_student",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si el estudiante está activo en el sistema",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
                "db_table": "users",
                "ordering": ["created_at"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TOTPDevice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(default="Tecmilenio 2FA", max_length=100)),
                ("secret_key", models.CharField(max_length=32, unique=True)),
                ("is_active", models.BooleanField(default=False)),
                ("confirmed", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="totp_device",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Dispositivo TOTP",
                "verbose_name_plural": "Dispositivos TOTP",
            },
        ),
        migrations.CreateModel(
            name="BackupCode",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("code", models.CharField(max_length=16, unique=True)),
                ("is_used", models.BooleanField(default=False)),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="backup_codes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Código de Respaldo",
                "verbose_name_plural": "Códigos de Respaldo",
                "indexes": [
                    models.Index(
                        fields=["user", "is_used"],
                        name="users_backu_user_id_39ff0e_idx",
                    ),
                    models.Index(fields=["code"], name="users_backu_code_0fe91b_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Token único para el restablecimiento de contraseña",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Fecha y hora de creación del token",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="Fecha y hora de expiración del token"
                    ),
                ),
                (
                    "used_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha y hora cuando se usó el token",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Indica si el token está activo"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Dirección IP desde donde se solicitó el restablecimiento",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent del navegador que solicitó el restablecimiento",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Usuario asociado al token de restablecimiento",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Token de Restablecimiento de Contraseña",
                "verbose_name_plural": "Tokens de Restablecimiento de Contraseña",
                "db_table": "password_reset_tokens",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["token"], name="password_re_token_060a1f_idx"),
                    models.Index(
                        fields=["user", "is_active"],
                        name="password_re_user_id_75c3a8_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="password_re_expires_8e96b7_idx"
                    ),
                ],
            },
        ),
    ]
