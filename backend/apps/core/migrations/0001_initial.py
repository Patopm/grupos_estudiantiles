# Generated by Django 5.2.6 on 2025-09-21 04:46

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the audit log entry",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("login_success", "Login Success"),
                            ("login_failed", "Login Failed"),
                            ("logout", "Logout"),
                            ("token_refresh", "Token Refresh"),
                            ("token_refresh_failed", "Token Refresh Failed"),
                            ("register_success", "Registration Success"),
                            ("register_failed", "Registration Failed"),
                            ("password_reset_request", "Password Reset Request"),
                            ("password_reset_success", "Password Reset Success"),
                            ("password_reset_failed", "Password Reset Failed"),
                            ("password_change_success", "Password Change Success"),
                            ("password_change_failed", "Password Change Failed"),
                            ("permission_denied", "Permission Denied"),
                            ("unauthorized_access", "Unauthorized Access"),
                            ("role_escalation_attempt", "Role Escalation Attempt"),
                            ("suspicious_activity", "Suspicious Activity"),
                            ("account_locked", "Account Locked"),
                            ("ip_locked", "IP Address Locked"),
                            ("brute_force_attempt", "Brute Force Attempt"),
                            ("session_hijack_attempt", "Session Hijack Attempt"),
                            ("token_manipulation", "Token Manipulation"),
                            ("user_created", "User Created"),
                            ("user_updated", "User Updated"),
                            ("user_deactivated", "User Deactivated"),
                            ("role_changed", "Role Changed"),
                            ("admin_action", "Administrative Action"),
                            ("bulk_operation", "Bulk Operation"),
                            ("data_export", "Data Export"),
                            (
                                "system_configuration_change",
                                "System Configuration Change",
                            ),
                        ],
                        help_text="Type of event being logged",
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Severity level of the event",
                        max_length=20,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="Username at the time of the event (preserved even if user is deleted)",
                        max_length=150,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="IP address from which the event originated"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent string from the request"
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True,
                        help_text="Session key associated with the event",
                        max_length=40,
                    ),
                ),
                (
                    "request_path",
                    models.CharField(
                        blank=True,
                        help_text="Request path that triggered the event",
                        max_length=500,
                    ),
                ),
                (
                    "request_method",
                    models.CharField(
                        blank=True,
                        help_text="HTTP method used in the request",
                        max_length=10,
                    ),
                ),
                (
                    "status_code",
                    models.IntegerField(
                        blank=True,
                        help_text="HTTP status code of the response",
                        null=True,
                    ),
                ),
                (
                    "message",
                    models.TextField(help_text="Detailed message describing the event"),
                ),
                (
                    "extra_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional data related to the event",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the event occurred",
                    ),
                ),
                (
                    "fingerprint",
                    models.CharField(
                        blank=True,
                        help_text="Unique fingerprint for the client/session",
                        max_length=64,
                    ),
                ),
                (
                    "geolocation",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Geolocation data if available",
                    ),
                ),
                (
                    "resolved",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this security event has been resolved",
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this security event was resolved",
                        null=True,
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about how this security event was resolved",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who resolved this security event",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User associated with the event (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Log",
                "verbose_name_plural": "Audit Logs",
                "db_table": "audit_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["event_type"], name="audit_logs_event_t_3207df_idx"
                    ),
                    models.Index(fields=["user"], name="audit_logs_user_id_73c422_idx"),
                    models.Index(
                        fields=["ip_address"], name="audit_logs_ip_addr_919cb4_idx"
                    ),
                    models.Index(
                        fields=["timestamp"], name="audit_logs_timesta_423be6_idx"
                    ),
                    models.Index(
                        fields=["severity"], name="audit_logs_severit_fc52cc_idx"
                    ),
                    models.Index(
                        fields=["resolved"], name="audit_logs_resolve_0396a5_idx"
                    ),
                    models.Index(
                        fields=["event_type", "timestamp"],
                        name="audit_logs_event_t_222f56_idx",
                    ),
                    models.Index(
                        fields=["user", "timestamp"],
                        name="audit_logs_user_id_88267f_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "timestamp"],
                        name="audit_logs_ip_addr_932507_idx",
                    ),
                ],
            },
        ),
    ]
